--   ::= import "core.ic"
io   ::= import "io.ic"
file ::= import "file.ic"
cstdlib ::= import "cstdlib.ic"

PartOne ::= (nums: []i64) -> i64 {
  n := nums.length as i64

  for (0, n) do [i: i64] {
    target := 2020 - nums[i]
    for (i + 1, n) do [j: i64] {
      if (target == nums[j]) then {
        return nums[i] * nums[j]
      }
    }
  }
}

// TODO: use a vector here instead of fixed-length array.
buffer: [256; i64]
idx := 0
file.With("inputs/01.test") open [f: file.File] {
  file.Lines(f) each [line: []char] {
    buffer[idx] = cstdlib.ParseInt64(line, 10 as i32)
    idx += 1
  }
}
io.Print("Part 1 (test): ")
io.Print(PartOne(slice(&buffer[0], idx as u64)))
io.Print(`\n)

idx = 0
file.With("inputs/01.full") open [f: file.File] {
  file.Lines(f) each [line: []char] {
    buffer[idx] = cstdlib.ParseInt64(line, 10 as i32)
    idx += 1
  }
}
io.Print("Part 1 (full): ")
io.Print(PartOne(slice(&buffer[0], idx as u64)))
io.Print(`\n)