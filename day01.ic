if ::= scope {
  enter ::= jump(b: bool) { goto b, then(), else() | done() }

  then ::= block {
    before ::= () -> () {}
    after ::= jump() { goto done() }
  }

  else ::= block {
    before ::= () -> () {}
    after ::= jump() { goto done() }
  }

  exit ::= () -> () {}
}

while ::= scope {
  enter ::= jump(b: bool) { goto b, do(), done() }

  do ::= block {
    before ::= () -> () {}
    after ::= jump() { goto start() }
  }

  exit ::= () -> () {}
}

Print ::= (n: int8) -> () { Print(n as int64) }
Print ::= (n: int16) -> () { Print(n as int64) }
Print ::= (n: int32) -> () { Print(n as int64) }
Print ::= (n: int64) -> () {
  printf ::= foreign("printf", (*nat8, int64) -> int32)
  printf(&"%lld"[0], n)
}

Print ::= (n: nat8) -> () { Print(n as nat64) }
Print ::= (n: nat16) -> () { Print(n as nat64) }
Print ::= (n: nat32) -> () { Print(n as nat64) }
Print ::= (n: nat64) -> () {
  printf ::= foreign("printf", (*nat8, nat64) -> int32)
  printf(&"%llu"[0], n)
}

Print ::= (b: bool) -> () {
  if (b) then { Print("true") } else { Print("false") }
}

Print ::= (s: byte_view) -> () {
  printf ::= foreign("printf", (*nat8, *nat8) -> int32)
  printf(&"%s"[0], &s[0])
}

Print ::= (f: float32) -> () { Print(f as float64) }

Print ::= (f: float64) -> () {
  printf ::= foreign("printf", (*nat8, float64) -> int32)
  printf(&"%f"[0], f)
}

test := [1721, 979, 366, 299, 675, 1456]
n := 6  // == test.size
i := 0
while (i < n) do {
  j := i + 1
  while (j < n) do {
    sum := test[i] + test[j]
    if (sum == 2020) then {
      Print(test[i] * test[j])
      Print("\n")
    }
  }
}
